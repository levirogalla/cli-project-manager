name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_run:
    workflows: [Main Branch Release]
    types:
      - completed

jobs:
  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: donna
            asset_name: donna-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: donna
            asset_name: donna-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: donna
            asset_name: donna-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: donna
            asset_name: donna-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: donna.exe
            asset_name: donna-windows-amd64.exe

    steps:
      - uses: actions/checkout@v3
        with: 
          token: ${{ secrets.PAT }}
          fetch-depth: 0
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup for ARM64 Linux cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build
        uses: actions-rs/cargo@v1
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ env.CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER }}
          CC_aarch64_unknown_linux_gnu: ${{ env.CC_aarch64_unknown_linux_gnu }}
          CXX_aarch64_unknown_linux_gnu: ${{ env.CXX_aarch64_unknown_linux_gnu }}
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important: This fetches all history and tags

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          # Debug what's in the artifacts directory
          find ./artifacts -type f -exec ls -la {} \;
          
          # Copy each binary to the release-assets directory with proper naming
          cp ./artifacts/donna-linux-amd64/donna ./release-assets/donna-linux-amd64
          cp ./artifacts/donna-linux-arm64/donna ./release-assets/donna-linux-arm64
          cp ./artifacts/donna-macos-amd64/donna ./release-assets/donna-macos-amd64
          cp ./artifacts/donna-macos-arm64/donna ./release-assets/donna-macos-arm64
          cp "./artifacts/donna-windows-amd64.exe/donna.exe" "./release-assets/donna-windows-amd64.exe"
          
          # Verify what's in the release-assets directory
          ls -la ./release-assets

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          files: ./release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.PAT }}